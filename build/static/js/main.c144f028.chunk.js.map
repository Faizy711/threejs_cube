{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","scene","THREE","camera1","window","innerWidth","innerHeight","camera2","renderer","setSize","document","body","appendChild","domElement","light","position","set","add","geometry_box","material_box","color","makeInstance","geometry","x","material","cube","cubes","material_line","geometry_line","vertices","push","z","lookAt","requestAnimationFrame","render","time","forEach","ndx","rot","rotation","y","_this","this","react_default","a","createElement","ref","mount","Component","rootElement","getElementById","ReactDOM","App_App","Boolean","location","hostname","match","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAKMA,8LAGF,IAAIC,EAAQ,IAAIC,IAEZC,EAAU,IAAID,IAAwB,GAAIE,OAAOC,WAAaD,OAAOE,YAAa,GAAK,KACvFC,EAAU,IAAIL,IAAwB,GAAIE,OAAOC,WAAaD,OAAOE,YAAa,EAAG,KAErFE,EAAW,IAAIN,IACnBM,EAASC,QAAQL,OAAOC,WAAYD,OAAOE,aAC3CI,SAASC,KAAKC,YAAYJ,EAASK,YAEjC,IAEMC,EAAQ,IAAIZ,IAFJ,SACI,GAElBY,EAAMC,SAASC,KAAK,EAAG,EAAG,GAC1Bf,EAAMgB,IAAIH,GAGZ,IAAII,EAAe,IAAIhB,IAAkB,EAAG,EAAG,GAC3CiB,EAAe,IAAIjB,IAAwB,CAAEkB,MAAO,UAC7C,IAAIlB,IAAWgB,EAAcC,GAExC,SAASE,EAAaC,EAAUF,EAAOG,GACrC,IAAMC,EAAW,IAAItB,IAAwB,CAAEkB,UAEzCK,EAAO,IAAIvB,IAAWoB,EAAUE,GAKtC,OAJAvB,EAAMgB,IAAIQ,GAEVA,EAAKV,SAASQ,EAAIA,EAEXE,EAGT,IAAMC,EAAQ,CACZL,EAAaH,EAAc,QAAU,GACrCG,EAAaH,EAAc,SAAW,GACtCG,EAAaH,EAAc,SAAU,IAGnCS,EAAgB,IAAIzB,IAAwB,CAAEkB,MAAO,MACrDQ,EAAgB,IAAI1B,IACxB0B,EAAcC,SAASC,KAAK,IAAI5B,KAAe,GAAI,EAAG,IACtD0B,EAAcC,SAASC,KAAK,IAAI5B,IAAc,EAAG,GAAI,IACrD0B,EAAcC,SAASC,KAAK,IAAI5B,IAAc,GAAI,EAAG,IAC1C,IAAIA,IAAW0B,EAAeD,GAIzCxB,EAAQY,SAASgB,EAAI,EACrBxB,EAAQQ,SAASC,IAAI,EAAG,EAAG,KAC3BT,EAAQyB,OAAO,EAAG,EAAG,GAgBrBC,sBAdA,SAASC,EAAOC,GACdA,GAAQ,KAERT,EAAMU,QAAQ,SAACX,EAAMY,GACnB,IACMC,EAAMH,GADE,EAAU,GAANE,GAElBZ,EAAKc,SAAShB,EAAIe,EAClBb,EAAKc,SAASC,EAAIF,IAGpB9B,EAAS0B,OAAOjC,EAAOE,GAEvB8B,sBAAsBC,sCAKjB,IAAAO,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAK,SAAAA,GAAG,OAAKL,EAAKM,MAAQD,YAxEnBE,aA4EZC,EAAcvC,SAASwC,eAAe,QAC5CC,IAASjB,OAAOS,EAAAC,EAAAC,cAACO,EAAD,MAASH,GAEVjD,QCxEKqD,QACW,cAA7BjD,OAAOkD,SAASC,UAEe,UAA7BnD,OAAOkD,SAASC,UAEhBnD,OAAOkD,SAASC,SAASC,MACvB,2DCZNL,IAASjB,OAAOS,EAAAC,EAAAC,cAACY,EAAD,MAAS/C,SAASwC,eAAe,SD2H3C,kBAAmBQ,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c144f028.chunk.js","sourcesContent":["\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\n\nclass App extends Component {\n  componentDidMount() {\n    // === THREE.JS CODE START ===\n    var scene = new THREE.Scene();\n\n    var camera1 = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    var camera2 = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 500);\n\n    var renderer = new THREE.WebGLRenderer();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n    {\n      const color = 0xFFFFFF;\n      const intensity = 2;\n      const light = new THREE.DirectionalLight(color, intensity);\n      light.position.set(-1, 2, 4);\n      scene.add(light);\n    }\n\n    var geometry_box = new THREE.BoxGeometry(1, 1, 1);\n    var material_box = new THREE.MeshPhongMaterial({ color: 0x44aa88 });\n    var cube = new THREE.Mesh(geometry_box, material_box);\n\n    function makeInstance(geometry, color, x) {\n      const material = new THREE.MeshPhongMaterial({ color });\n\n      const cube = new THREE.Mesh(geometry, material);\n      scene.add(cube);\n\n      cube.position.x = x;\n\n      return cube;\n    }\n\n    const cubes = [\n      makeInstance(geometry_box, 0x44aa88, 0),\n      makeInstance(geometry_box, 0x8844aa, -3),\n      makeInstance(geometry_box, 0xaa8844, 3),\n    ];\n\n    var material_line = new THREE.LineBasicMaterial({ color: 0x0000ff });\n    var geometry_line = new THREE.Geometry();\n    geometry_line.vertices.push(new THREE.Vector3(-10, 0, 0));\n    geometry_line.vertices.push(new THREE.Vector3(0, 10, 0));\n    geometry_line.vertices.push(new THREE.Vector3(10, 0, 0));\n    var line = new THREE.Line(geometry_line, material_line);\n\n    // scene.add(cube);\n\n    camera1.position.z = 5;\n    camera2.position.set(0, 0, 100);\n    camera2.lookAt(0, 0, 0);\n\n    function render(time) {\n      time *= 0.001;  // convert time to seconds\n\n      cubes.forEach((cube, ndx) => {\n        const speed = 1 + ndx * .1;\n        const rot = time * speed;\n        cube.rotation.x = rot;\n        cube.rotation.y = rot;\n      });\n\n      renderer.render(scene, camera1);\n\n      requestAnimationFrame(render);\n    }\n    requestAnimationFrame(render);\n    // === THREE.JS EXAMPLE CODE END ===\n  }\n  render() {\n    return (\n      <div ref={ref => (this.mount = ref)} />\n    )\n  }\n}\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}